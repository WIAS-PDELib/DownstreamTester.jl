# SPDX-License-Identifier: MIT

using LightXML: LightXML, XMLElement, attribute, child_elements, content, has_children, name, parse_file, root

"""
    get_test_location(message::String, pkgname::String)

Get the filename, relative path and line number of the failing test evaluation
"""
function get_test_location(message::String, pkgname::String)
    tmp = split(split(message, "\n")[1], "/")
    ind = findall(x -> x == pkgname, tmp)[1]
    return join(tmp[(ind + 2):end], '/')
end


"""
    process_testcase(testcase::XMLElement)::Set{FailureInfo}

Process the given XMLElement to get information about failing tests. 
If the element is not a testcase, return an empty set
"""
function process_testcase(testcase::XMLElement, pkgname::String)::Set{FailureInfo}
    failures = Set{FailureInfo}()

    if name(testcase) != "testcase"
        return failures
    end
    if !has_children(testcase)
        return failures
    end
    for child in child_elements(testcase)
        if name(child) == "failure"
            suitename = attribute(testcase, "classname")
            casename = attribute(testcase, "name")
            failuremessage = attribute(child, "message")
            tmp = content(child)
            failurelocation = get_test_location(tmp, pkgname)
            failure = FailureInfo(
                suitename,
                casename,
                failuremessage,
                failurelocation
            )
            push!(failures, failure)
        end
    end
    return failures
end

"""
    process_testsuite(testsuite::XMLElement)::Set{FailureInfo}

Process the given XMLElement to get information about failing tests
within a testsuite. 
If the element is not a testsuite, return an empty set
"""
function process_testsuite(testsuite::XMLElement, pkgname::String)::Set{FailureInfo}
    failures = Set{FailureInfo}()

    if name(testsuite) != "testsuite"
        return failures
    end

    if attribute(testsuite, "failures") == "0"
        return failures
    end

    for case in child_elements(testsuite)
        newfailures = process_testcase(case, pkgname)
        for entry in newfailures
            push!(failures, entry)
        end
    end

    return failures
end

"""
    process_log(logfile::String)::Set{FailureInfo}

Process an XML log generated by TestReports.jl
to get a set of failing tests.
"""
function process_log(logfile::String, pkgname::String)::Set{FailureInfo}
    failures = Set{FailureInfo}()
    logxml = parse_file(logfile)
    logroot = root(logxml)
    #no processing needed if no failures were recorded
    if attribute(logroot, "failures") == "0" && attribute(logroot, "errors") == "0"
        return failures
    end
    # Find failing child node(s)
    for testsuite in child_elements(logroot)
        newfailures = process_testsuite(testsuite, pkgname)
        for entry in newfailures
            push!(failures, entry)
        end
    end

    return failures
end
